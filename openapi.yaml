# NOTE: This file is generated by `backend/src/openapi.ts` via `npm run openapi:yaml`.
# It may be overwritten by CI. Regenerate locally to refresh schemas and paths.

openapi: 3.0.3
info:
  title: Atestados API
  description: API de atestados m√©dicos. Preferir regenerar via `backend/src/openapi.ts`.
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
    description: Local dev
components:
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Health:
      type: object
      properties:
        status:
          type: string
          example: ok
        time:
          type: string
          format: date-time
    AccessToken:
      type: object
      properties:
        accessToken:
          type: string
    LoginDto:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          minLength: 8
          example: secret12345
    IcdItem:
      type: object
      required: [code, title]
      properties:
        code:
          type: string
          example: J06.9
        title:
          type: string
          example: Acute upper respiratory infection, unspecified
    Collaborator:
      type: object
      required: [fullName, cpf, birthDate, position, status]
      properties:
        _id:
          type: string
          example: 64ddae5f2f8fb814c89bd421
        fullName:
          type: string
        cpf:
          type: string
          description: CPF normalized digits
        birthDate:
          type: string
          format: date
        position:
          type: string
        department:
          type: string
          nullable: true
        status:
          type: string
          enum: [active, inactive]
    CreateCollaboratorDto:
      allOf:
        - type: object
          required: [fullName, cpf, birthDate, position]
          properties:
            fullName: { type: string }
            cpf: { type: string }
            birthDate: { type: string, format: date }
            position: { type: string }
            department: { type: string }
    UpdateStatusDto:
      type: object
      required: [status]
      properties:
        status:
          type: string
          enum: [active, inactive]
    User:
      type: object
      required: [email, fullName, roles, status]
      properties:
        _id: { type: string }
        email: { type: string, format: email }
        fullName: { type: string }
        roles:
          type: array
          items: { type: string }
        status:
          type: string
          enum: [active, disabled]
    CreateUserDto:
      type: object
      required: [email, fullName, password]
      properties:
        email: { type: string, format: email }
        fullName: { type: string }
        password: { type: string, minLength: 8 }
        roles:
          type: array
          items: { type: string }
    UpdateUserStatusDto:
      type: object
      required: [status]
      properties:
        status:
          type: string
          enum: [active, disabled]
    UpdateUserRolesDto:
      type: object
      required: [roles]
      properties:
        roles:
          type: array
          items: { type: string }
    MedicalCertificate:
      type: object
      required: [collaboratorId, issueDate, startDate, endDate, days, icdCode, icdTitle, status]
      properties:
        _id: { type: string }
        collaboratorId: { type: string }
        issuerUserId: { type: string, nullable: true }
        issueDate: { type: string, format: date-time }
        startDate: { type: string, format: date }
        endDate: { type: string, format: date }
        days: { type: integer, minimum: 1, maximum: 365 }
        diagnosis: { type: string, nullable: true }
        icdCode: { type: string }
        icdTitle: { type: string }
        status: { type: string, enum: [active, cancelled, expired] }
    CreateMedicalCertificateDto:
      type: object
      required: [collaboratorId, startDate, endDate, days, icdCode, icdTitle]
      properties:
        collaboratorId: { type: string }
        issuerUserId: { type: string }
        startDate: { type: string, format: date }
        endDate: { type: string, format: date }
        days: { type: integer, minimum: 1, maximum: 365 }
        diagnosis: { type: string }
        icdCode: { type: string }
        icdTitle: { type: string }
    PaginatedCollaborators:
      type: object
      properties:
        results:
          type: array
          items: { $ref: '#/components/schemas/Collaborator' }
        limit: { type: integer }
        offset: { type: integer }
        total: { type: integer }
    PaginatedCertificates:
      type: object
      properties:
        results:
          type: array
          items: { $ref: '#/components/schemas/MedicalCertificate' }
        limit: { type: integer }
        offset: { type: integer }
        total: { type: integer }
paths:
  /health:
    get:
      tags: [Health]
      summary: Health check
      operationId: health
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Health' }
  /auth/login:
    post:
      tags: [Auth]
      summary: Login and obtain JWT
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginDto' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AccessToken' }
        '401': { description: Invalid credentials }
        '429': { description: Rate limit exceeded }
  /auth/logout:
    post:
      tags: [Auth]
      summary: Logout and invalidate session
      security: [ { bearer: [] } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
  /icd/search:
    get:
      tags: [ICD]
      summary: Search WHO ICD codes
      parameters:
        - name: q
          in: query
          required: true
          schema: { type: string, minLength: 2 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items: { $ref: '#/components/schemas/IcdItem' }
        '429': { description: Rate limit exceeded }
  /collaborators:
    get:
      tags: [Collaborators]
      security: [ { bearer: [] } ]
      summary: Search collaborators by name
      parameters:
        - name: q
          in: query
          schema: { type: string }
        - name: limit
          in: query
          schema: { type: integer, default: 20 }
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PaginatedCollaborators' }
    post:
      tags: [Collaborators]
      security: [ { bearer: [] } ]
      summary: Create collaborator
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateCollaboratorDto' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Collaborator' }
        '409': { description: Duplicate CPF }
  /collaborators/{cpf}:
    get:
      tags: [Collaborators]
      security: [ { bearer: [] } ]
      summary: Get collaborator by CPF
      parameters:
        - name: cpf
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Collaborator' } } } }
        '404': { description: Not found }
  /collaborators/{cpf}/status:
    patch:
      tags: [Collaborators]
      security: [ { bearer: [] } ]
      summary: Update collaborator status
      parameters:
        - name: cpf
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateStatusDto' }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Collaborator' } } } }
        '404': { description: Not found }
  /users:
    post:
      tags: [Users]
      security: [ { bearer: [] } ]
      summary: Create user (admin)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateUserDto' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '403': { description: Insufficient role }
  /users/{email}:
    get:
      tags: [Users]
      security: [ { bearer: [] } ]
      summary: Get user by email (admin)
      parameters:
        - name: email
          in: path
          required: true
          schema: { type: string, format: email }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '404': { description: Not found }
  /users/{email}/status:
    patch:
      tags: [Users]
      security: [ { bearer: [] } ]
      summary: Update user status (admin)
      parameters:
        - name: email
          in: path
          required: true
          schema: { type: string, format: email }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateUserStatusDto' }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '404': { description: Not found }
  /users/{email}/roles:
    patch:
      tags: [Users]
      security: [ { bearer: [] } ]
      summary: Update user roles (admin)
      parameters:
        - name: email
          in: path
          required: true
          schema: { type: string, format: email }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateUserRolesDto' }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '404': { description: Not found }
  /medical-certificates:
    get:
      tags: [Medical Certificates]
      security: [ { bearer: [] } ]
      summary: List certificates (filters + pagination)
      parameters:
        - name: collaboratorId
          in: query
          schema: { type: string }
        - name: status
          in: query
          schema: { type: string, enum: [active, cancelled, expired] }
        - name: icdCode
          in: query
          schema: { type: string }
        - name: startDate
          in: query
          schema: { type: string, format: date }
        - name: endDate
          in: query
          schema: { type: string, format: date }
        - name: limit
          in: query
          schema: { type: integer, default: 20 }
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PaginatedCertificates' } } } }
    post:
      tags: [Medical Certificates]
      security: [ { bearer: [] } ]
      summary: Create medical certificate
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateMedicalCertificateDto' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/MedicalCertificate' } } } }
  /medical-certificates/{id}/cancel:
    patch:
      tags: [Medical Certificates]
      security: [ { bearer: [] } ]
      summary: Cancel certificate
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/MedicalCertificate' } } } }
        '404': { description: Not found }
